{
  "name": "breadcrumb",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-popover"
  ],
  "registryDependencies": [
    "button",
    "popover"
  ],
  "files": [
    {
      "path": "./registry/default/extension/breadcrumb.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport { buttonVariants } from \"@/components/ui/button\";\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\nimport { DotsHorizontalIcon } from \"@radix-ui/react-icons\";\nimport { VariantProps } from \"class-variance-authority\";\nimport { ChevronRight } from \"lucide-react\";\nimport {\n  Dispatch,\n  KeyboardEvent,\n  SetStateAction,\n  createContext,\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\n\ninterface BreadCrumbProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof buttonVariants> {\n  orientation?: \"horizontal\" | \"vertical\";\n}\n\ntype BreadCrumbContextProps = {\n  activeIndex: number;\n  orientation: \"horizontal\" | \"vertical\";\n  setActiveIndex: (activeIndex: number) => void;\n  value: number[];\n  onValueChange: Dispatch<SetStateAction<number[]>>;\n  onPrevValueChange: Dispatch<SetStateAction<number[]>>;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  setTarget: (target: number) => void;\n} & BreadCrumbProps;\n\nconst BreadCrumbContext = createContext<BreadCrumbContextProps | null>(null);\n\nconst useBreadcrumb = () => {\n  const context = useContext(BreadCrumbContext);\n  if (!context) {\n    throw new Error(\"useBreadcrumb must be used within a BreadCrumb\");\n  }\n  return context;\n};\n\n/**\n * Breadcrumb Docs: {@link: https://shadcn-extension.vercel.app/docs/breadcrumb}\n */\nexport const BreadCrumb = ({\n  className,\n  orientation = \"horizontal\",\n  variant,\n  dir,\n  size,\n  children,\n  ...props\n}: BreadCrumbProps) => {\n  const [value, setValue] = useState<number[]>([]);\n  const [prevValue, setPrevValue] = useState<number[]>([]);\n  const [activeIndex, setActiveIndex] = useState(-1);\n  const [open, setOpen] = useState(false);\n  const [target, setTarget] = useState(0);\n\n  const handleKeyDown = useCallback(\n    (e: KeyboardEvent<HTMLDivElement>) => {\n      e.preventDefault();\n      const length = value.length - 1;\n\n      const moveNext = () => {\n        const nextIndex = activeIndex + 1 > length ? 0 : activeIndex + 1;\n        setActiveIndex(value[nextIndex]);\n      };\n\n      const movePrev = () => {\n        const currentIndex = value.indexOf(activeIndex) - 1;\n        const prevIndex = currentIndex < 0 ? length : currentIndex;\n        setActiveIndex(value[prevIndex]);\n      };\n\n      switch (e.key) {\n        case \"ArrowDown\":\n          if (orientation === \"vertical\") {\n            moveNext();\n          }\n          break;\n        case \"ArrowUp\":\n          if (orientation === \"vertical\") {\n            movePrev();\n          }\n          break;\n        case \"ArrowRight\":\n          if (orientation === \"horizontal\") {\n            if (dir === \"rtl\") {\n              movePrev();\n              return;\n            }\n            moveNext();\n          }\n          break;\n        case \"ArrowLeft\":\n          if (orientation === \"horizontal\") {\n            if (dir === \"rtl\") {\n              moveNext();\n              return;\n            }\n            movePrev();\n          }\n          break;\n      }\n\n      if (e.key === \"Escape\") {\n        if (activeIndex !== -1) {\n          if (prevValue.length > 0) setValue(prevValue);\n          setOpen(false);\n          if (\n            value.includes(activeIndex) &&\n            !prevValue.includes(activeIndex) &&\n            prevValue.length > 0\n          ) {\n            setActiveIndex(target);\n            return;\n          }\n          setActiveIndex(-1);\n        }\n      } else if (e.key === \"Enter\" && activeIndex === target) {\n        if (prevValue.length > 0) setValue(prevValue);\n        setOpen(!open);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [activeIndex, value, prevValue],\n  );\n\n  return (\n    <BreadCrumbContext.Provider\n      value={{\n        variant,\n        size,\n        orientation,\n        activeIndex,\n        value,\n        onValueChange: setValue,\n        onPrevValueChange: setPrevValue,\n        setActiveIndex,\n        open,\n        onOpenChange: setOpen,\n        setTarget,\n      }}\n    >\n      <div\n        tabIndex={0}\n        onKeyDownCapture={handleKeyDown}\n        className={cn(\n          \"flex items-center justify-center flex-wrap gap-2\",\n          {\n            \"flex-row\": orientation === \"horizontal\",\n            \"flex-col\": orientation === \"vertical\",\n          },\n          className,\n        )}\n        dir={dir}\n        {...props}\n      >\n        {children}\n      </div>\n    </BreadCrumbContext.Provider>\n  );\n};\n\nBreadCrumb.displayName = \"BreadCrumb\";\n\ntype BreadCrumbItemProps = {\n  index: number;\n} & (\n  | {\n      isActive: boolean;\n      activeVariant?: VariantProps<typeof buttonVariants>;\n    }\n  | {\n      isActive?: undefined;\n      activeVariant?: undefined;\n    }\n);\n\nexport const BreadCrumbItem = forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & BreadCrumbItemProps\n>(({ className, isActive, activeVariant, index, children, ...props }, ref) => {\n  const {\n    variant,\n    size,\n    activeIndex,\n    value,\n    onValueChange,\n    setActiveIndex,\n    onPrevValueChange,\n  } = useBreadcrumb();\n\n  const variants = {\n    variant,\n    size,\n  };\n\n  const activeVariants = activeVariant ?? variants;\n  const Variants = isActive ? activeVariants : variants;\n  const isSelected = activeIndex === index;\n\n  useEffect(() => {\n    onValueChange((prev) => {\n      if (prev.includes(index)) {\n        return prev;\n      }\n      const arr = [...prev, index];\n      return arr.sort((a, b) => Number(a) - Number(b));\n    });\n    return () => {\n      onPrevValueChange(value);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [index, onValueChange]);\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        buttonVariants(Variants),\n        className,\n        isSelected ? \"bg-muted focus-visible:ring-0 ring-0\" : \"\",\n      )}\n      onClick={() => setActiveIndex(index)}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n});\n\nBreadCrumbItem.displayName = \"BreadCrumbItem\";\n\nexport const BreadCrumbSeparator = forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ className, children, ...props }, ref) => {\n  const { orientation, dir } = useBreadcrumb();\n  return (\n    <span\n      ref={ref}\n      {...props}\n      dir={dir}\n      data-orientation={orientation}\n      className={cn(\n        \"flex items-center justify-center size-4 data-[orientation='horizontal']:rotate-0 rtl:data-[orientation='horizontal']:rotate-180 data-[orientation='vertical']:rotate-90 \",\n      )}\n    >\n      {children ? (\n        children\n      ) : (\n        <ChevronRight className={cn(\"h-4 w-4  \", className)} />\n      )}\n      <span className=\"sr-only\">next page</span>\n    </span>\n  );\n});\n\nBreadCrumbSeparator.displayName = \"BreadCrumbSeparator\";\n\nexport const BreadCrumbEllipsis = forwardRef<\n  HTMLSpanElement,\n  { index: number } & React.HTMLAttributes<HTMLSpanElement>\n>(({ className, index, ...props }, ref) => {\n  const { activeIndex, onValueChange, setTarget } = useBreadcrumb();\n  const isSelected = activeIndex === index;\n  useEffect(() => {\n    setTarget(index);\n    onValueChange((prev) => {\n      if (prev.includes(index)) {\n        return prev;\n      }\n      const arr = [...prev, index];\n      return arr.sort((a, b) => Number(a) - Number(b));\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [index, onValueChange]);\n  return (\n    <span\n      ref={ref}\n      aria-hidden\n      className={cn(\"\", className, isSelected ? \"bg-muted\" : \"\")}\n      {...props}\n    >\n      <DotsHorizontalIcon className=\"h-4 w-4 \" />\n      <span className=\"sr-only\">More pages</span>\n    </span>\n  );\n});\n\nBreadCrumbEllipsis.displayName = \"BreadCrumbEllipsis\";\n\nexport const BreadCrumbPopover = forwardRef<\n  PopoverPrimitive.PopoverProps,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ children }, ref) => {\n  const { open, onOpenChange } = useBreadcrumb();\n  return (\n    <Popover open={open} onOpenChange={onOpenChange}>\n      {children}\n    </Popover>\n  );\n});\n\nBreadCrumbPopover.displayName = \"BreadCrumbPopover\";\n\nexport const BreadCrumbTrigger = PopoverTrigger;\n\nBreadCrumbTrigger.displayName = \"BreadCrumbTrigger\";\n\nexport const BreadCrumbContent = forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ children, ...props }, ref) => {\n  const { orientation } = useBreadcrumb();\n\n  return (\n    <PopoverContent\n      {...props}\n      side={orientation === \"horizontal\" ? \"bottom\" : \"right\"}\n      ref={ref}\n    >\n      {children}\n    </PopoverContent>\n  );\n});\n\nBreadCrumbContent.displayName = \"BreadCrumbContent\";\n"
    }
  ],
  "docs": "https://shadcn-extension.vercel.app/docs/breadcrumb"
}