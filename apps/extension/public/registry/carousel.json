{
  "name": "carousel",
  "type": "registry:ui",
  "dependencies": [
    "embla-carousel-react",
    "embla-carousel",
    "@radix-ui/react-icons"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "./registry/default/extension/carousel.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport React, {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { EmblaOptionsType } from \"embla-carousel\";\nimport useEmblaCarousel from \"embla-carousel-react\";\nimport { ChevronRightIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { ChevronLeftIcon } from \"@radix-ui/react-icons\";\nimport { createContext } from \"react\";\n\ntype CarouselContextProps = {\n  carouselOptions?: EmblaOptionsType;\n  orientation?: \"vertical\" | \"horizontal\";\n  plugins?: Parameters<typeof useEmblaCarousel>[1];\n};\n\ntype DirectionOption = \"ltr\" | \"rtl\" | undefined;\n\ntype CarouselContextType = {\n  emblaMainApi: ReturnType<typeof useEmblaCarousel>[1];\n  mainRef: ReturnType<typeof useEmblaCarousel>[0];\n  thumbsRef: ReturnType<typeof useEmblaCarousel>[0];\n  scrollNext: () => void;\n  scrollPrev: () => void;\n  canScrollNext: boolean;\n  canScrollPrev: boolean;\n  activeIndex: number;\n  onThumbClick: (index: number) => void;\n  handleKeyDown: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  orientation: \"vertical\" | \"horizontal\";\n  direction: DirectionOption;\n} & CarouselContextProps;\n\nconst useCarousel = () => {\n  const context = useContext(CarouselContext);\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a CarouselProvider\");\n  }\n  return context;\n};\n\nconst CarouselContext = createContext<CarouselContextType | null>(null);\n\n/**\n * Carousel Docs: {@link: https://shadcn-extension.vercel.app/docs/carousel}\n */\n\nconst Carousel = forwardRef<\n  HTMLDivElement,\n  CarouselContextProps & React.HTMLAttributes<HTMLDivElement>\n>(\n  (\n    {\n      carouselOptions,\n      orientation = \"horizontal\",\n      dir,\n      plugins,\n      children,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const [emblaMainRef, emblaMainApi] = useEmblaCarousel(\n      {\n        ...carouselOptions,\n        axis: orientation === \"vertical\" ? \"y\" : \"x\",\n        direction: carouselOptions?.direction ?? (dir as DirectionOption),\n      },\n      plugins,\n    );\n\n    const [emblaThumbsRef, emblaThumbsApi] = useEmblaCarousel(\n      {\n        ...carouselOptions,\n        axis: orientation === \"vertical\" ? \"y\" : \"x\",\n        direction: carouselOptions?.direction ?? (dir as DirectionOption),\n        containScroll: \"keepSnaps\",\n        dragFree: true,\n      },\n      plugins,\n    );\n\n    const [canScrollPrev, setCanScrollPrev] = useState<boolean>(false);\n    const [canScrollNext, setCanScrollNext] = useState<boolean>(false);\n    const [activeIndex, setActiveIndex] = useState<number>(0);\n\n    const ScrollNext = useCallback(() => {\n      if (!emblaMainApi) return;\n      emblaMainApi.scrollNext();\n    }, [emblaMainApi]);\n\n    const ScrollPrev = useCallback(() => {\n      if (!emblaMainApi) return;\n      emblaMainApi.scrollPrev();\n    }, [emblaMainApi]);\n\n    const direction = carouselOptions?.direction ?? (dir as DirectionOption);\n\n    const handleKeyDown = useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (!emblaMainApi) return;\n        switch (event.key) {\n          case \"ArrowLeft\":\n            event.preventDefault();\n            if (orientation === \"horizontal\") {\n              if (direction === \"rtl\") {\n                ScrollNext();\n                return;\n              }\n              ScrollPrev();\n            }\n            break;\n          case \"ArrowRight\":\n            event.preventDefault();\n            if (orientation === \"horizontal\") {\n              if (direction === \"rtl\") {\n                ScrollPrev();\n                return;\n              }\n              ScrollNext();\n            }\n            break;\n          case \"ArrowUp\":\n            event.preventDefault();\n            if (orientation === \"vertical\") {\n              ScrollPrev();\n            }\n            break;\n          case \"ArrowDown\":\n            event.preventDefault();\n            if (orientation === \"vertical\") {\n              ScrollNext();\n            }\n            break;\n        }\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [emblaMainApi, orientation, direction],\n    );\n\n    const onThumbClick = useCallback(\n      (index: number) => {\n        if (!emblaMainApi || !emblaThumbsApi) return;\n        emblaMainApi.scrollTo(index);\n      },\n      [emblaMainApi, emblaThumbsApi],\n    );\n\n    const onSelect = useCallback(() => {\n      if (!emblaMainApi || !emblaThumbsApi) return;\n      const selected = emblaMainApi.selectedScrollSnap();\n      setActiveIndex(selected);\n      emblaThumbsApi.scrollTo(selected);\n      setCanScrollPrev(emblaMainApi.canScrollPrev());\n      setCanScrollNext(emblaMainApi.canScrollNext());\n    }, [emblaMainApi, emblaThumbsApi]);\n\n    useEffect(() => {\n      if (!emblaMainApi) return;\n      onSelect();\n      emblaMainApi.on(\"select\", onSelect);\n      emblaMainApi.on(\"reInit\", onSelect);\n      return () => {\n        emblaMainApi.off(\"select\", onSelect);\n      };\n    }, [emblaMainApi, onSelect]);\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          emblaMainApi,\n          mainRef: emblaMainRef,\n          thumbsRef: emblaThumbsRef,\n          scrollNext: ScrollNext,\n          scrollPrev: ScrollPrev,\n          canScrollNext,\n          canScrollPrev,\n          activeIndex,\n          onThumbClick,\n          handleKeyDown,\n          carouselOptions,\n          direction,\n          orientation:\n            orientation ||\n            (carouselOptions?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n        }}\n      >\n        <div\n          {...props}\n          tabIndex={0}\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\n            \"grid gap-2 w-full relative focus:outline-none\",\n            className,\n          )}\n          dir={direction}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    );\n  },\n);\n\nCarousel.displayName = \"Carousel\";\n\nconst CarouselMainContainer = forwardRef<\n  HTMLDivElement,\n  {} & React.HTMLAttributes<HTMLDivElement>\n>(({ className, dir, children, ...props }, ref) => {\n  const { mainRef, orientation, direction } = useCarousel();\n\n  return (\n    <div {...props} ref={mainRef} className=\"overflow-hidden\" dir={direction}>\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          `${orientation === \"vertical\" ? \"flex-col\" : \"\"}`,\n          className,\n        )}\n      >\n        {children}\n      </div>\n    </div>\n  );\n});\n\nCarouselMainContainer.displayName = \"CarouselMainContainer\";\n\nconst CarouselThumbsContainer = forwardRef<\n  HTMLDivElement,\n  {} & React.HTMLAttributes<HTMLDivElement>\n>(({ className, dir, children, ...props }, ref) => {\n  const { thumbsRef, orientation, direction } = useCarousel();\n\n  return (\n    <div {...props} ref={thumbsRef} className=\"overflow-hidden\" dir={direction}>\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          `${orientation === \"vertical\" ? \"flex-col\" : \"\"}`,\n          className,\n        )}\n      >\n        {children}\n      </div>\n    </div>\n  );\n});\n\nCarouselThumbsContainer.displayName = \"CarouselThumbsContainer\";\n\nconst SliderMainItem = forwardRef<\n  HTMLDivElement,\n  {} & React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => {\n  const { orientation } = useCarousel();\n  return (\n    <div\n      {...props}\n      ref={ref}\n      className={cn(\n        `min-w-0 shrink-0 grow-0 basis-full bg-background p-1 ${\n          orientation === \"vertical\" ? \"pb-1\" : \"pr-1\"\n        }`,\n        className,\n      )}\n    >\n      {children}\n    </div>\n  );\n});\n\nSliderMainItem.displayName = \"SliderMainItem\";\n\nconst SliderThumbItem = forwardRef<\n  HTMLDivElement,\n  {\n    index: number;\n  } & React.HTMLAttributes<HTMLDivElement>\n>(({ className, index, children, ...props }, ref) => {\n  const { activeIndex, onThumbClick, orientation } = useCarousel();\n  const isSlideActive = activeIndex === index;\n  return (\n    <div\n      {...props}\n      ref={ref}\n      onClick={() => onThumbClick(index)}\n      className={cn(\n        \"flex min-w-0 shrink-0 grow-0 basis-1/3 bg-background p-1\",\n        `${orientation === \"vertical\" ? \"pb-1\" : \"pr-1\"}`,\n        className,\n      )}\n    >\n      <div\n        className={`relative aspect-square h-20 w-full opacity-50 rounded-md transition-opacity ${\n          isSlideActive ? \"!opacity-100\" : \"\"\n        }`}\n      >\n        {children}\n      </div>\n    </div>\n  );\n});\n\nSliderThumbItem.displayName = \"SliderThumbItem\";\n\nconst CarouselIndicator = forwardRef<\n  HTMLButtonElement,\n  { index: number } & React.ComponentProps<typeof Button>\n>(({ className, index, children, ...props }, ref) => {\n  const { activeIndex, onThumbClick } = useCarousel();\n  const isSlideActive = activeIndex === index;\n  return (\n    <Button\n      ref={ref}\n      size=\"icon\"\n      className={cn(\n        \"h-1 w-6 rounded-full\",\n        \"data-[active='false']:bg-primary/50 data-[active='true']:bg-primary\",\n        className,\n      )}\n      data-active={isSlideActive}\n      onClick={() => onThumbClick(index)}\n      {...props}\n    >\n      <span className=\"sr-only\">slide {index + 1} </span>\n    </Button>\n  );\n});\n\nCarouselIndicator.displayName = \"CarouselIndicator\";\n\nconst CarouselPrevious = forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, dir, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const {\n    canScrollNext,\n    canScrollPrev,\n    scrollNext,\n    scrollPrev,\n    orientation,\n    direction,\n  } = useCarousel();\n\n  const scroll = direction === \"rtl\" ? scrollNext : scrollPrev;\n  const canScroll = direction === \"rtl\" ? canScrollNext : canScrollPrev;\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-6 w-6 rounded-full z-10\",\n        orientation === \"vertical\"\n          ? \"-top-2 left-1/2 -translate-x-1/2 rotate-90\"\n          : \"-left-2 top-1/2 -translate-y-1/2\",\n        className,\n      )}\n      onClick={scroll}\n      disabled={!canScroll}\n      {...props}\n    >\n      <ChevronLeftIcon className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  );\n});\nCarouselPrevious.displayName = \"CarouselPrevious\";\n\nconst CarouselNext = forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, dir, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const {\n    canScrollNext,\n    canScrollPrev,\n    scrollNext,\n    scrollPrev,\n    orientation,\n    direction,\n  } = useCarousel();\n  const scroll = direction === \"rtl\" ? scrollPrev : scrollNext;\n  const canScroll = direction === \"rtl\" ? canScrollPrev : canScrollNext;\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-6 w-6 rounded-full z-10\",\n        orientation === \"vertical\"\n          ? \"-bottom-2 left-1/2 -translate-x-1/2 rotate-90\"\n          : \"-right-2 top-1/2 -translate-y-1/2\",\n        className,\n      )}\n      onClick={scroll}\n      disabled={!canScroll}\n      {...props}\n    >\n      <ChevronRightIcon className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  );\n});\n\nCarouselNext.displayName = \"CarouselNext\";\n\nexport {\n  Carousel,\n  CarouselMainContainer,\n  CarouselThumbsContainer,\n  SliderMainItem,\n  SliderThumbItem,\n  CarouselIndicator,\n  CarouselPrevious,\n  CarouselNext,\n  useCarousel,\n};\n"
    }
  ],
  "docs": "https://shadcn-extension.vercel.app/docs/carousel"
}