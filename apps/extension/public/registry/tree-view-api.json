{
  "name": "tree-view-api",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-accordion"
  ],
  "registryDependencies": [
    "button",
    "scroll-area"
  ],
  "files": [
    {
      "path": "./registry/default/extension/tree-view-api.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { cn } from \"@/lib/utils\";\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\";\nimport { FileIcon, FolderIcon, FolderOpenIcon } from \"lucide-react\";\nimport React, {\n  createContext,\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { Button } from \"@/components/ui/button\";\n\ntype TreeViewElement = {\n  id: string;\n  name: string;\n  isSelectable?: boolean;\n  children?: TreeViewElement[];\n};\n\ntype TreeContextProps = {\n  selectedId: string | undefined;\n  expendedItems: string[] | undefined;\n  indicator: boolean;\n  handleExpand: (id: string) => void;\n  selectItem: (id: string) => void;\n  setExpendedItems?: React.Dispatch<React.SetStateAction<string[] | undefined>>;\n  openIcon?: React.ReactNode;\n  closeIcon?: React.ReactNode;\n  direction: \"rtl\" | \"ltr\";\n};\n\nconst TreeContext = createContext<TreeContextProps | null>(null);\n\nconst useTree = () => {\n  const context = useContext(TreeContext);\n  if (!context) {\n    throw new Error(\"useTree must be used within a TreeProvider\");\n  }\n  return context;\n};\n\ninterface TreeViewComponentProps extends React.HTMLAttributes<HTMLDivElement> {}\n\ntype Direction = \"rtl\" | \"ltr\" | undefined;\n\ntype TreeViewProps = {\n  initialSelectedId?: string;\n  indicator?: boolean;\n  elements?: TreeViewElement[];\n  initialExpendedItems?: string[];\n  openIcon?: React.ReactNode;\n  closeIcon?: React.ReactNode;\n} & TreeViewComponentProps;\n\n/**\n * Tree View Docs: {@link: https://shadcn-extension.vercel.app/docs/tree-view}\n */\n\nconst Tree = forwardRef<HTMLDivElement, TreeViewProps>(\n  (\n    {\n      className,\n      elements,\n      initialSelectedId,\n      initialExpendedItems,\n      children,\n      indicator = true,\n      openIcon,\n      closeIcon,\n      dir,\n      ...props\n    },\n    ref,\n  ) => {\n    const [selectedId, setSelectedId] = useState<string | undefined>(\n      initialSelectedId,\n    );\n    const [expendedItems, setExpendedItems] = useState<string[] | undefined>(\n      initialExpendedItems,\n    );\n\n    const selectItem = useCallback((id: string) => {\n      setSelectedId(id);\n    }, []);\n\n    const handleExpand = useCallback((id: string) => {\n      setExpendedItems((prev) => {\n        if (prev?.includes(id)) {\n          return prev.filter((item) => item !== id);\n        }\n        return [...(prev ?? []), id];\n      });\n    }, []);\n\n    const expandSpecificTargetedElements = useCallback(\n      (elements?: TreeViewElement[], selectId?: string) => {\n        if (!elements || !selectId) return;\n        const findParent = (\n          currentElement: TreeViewElement,\n          currentPath: string[] = [],\n        ) => {\n          const isSelectable = currentElement.isSelectable ?? true;\n          const newPath = [...currentPath, currentElement.id];\n          if (currentElement.id === selectId) {\n            if (isSelectable) {\n              setExpendedItems((prev) => [...(prev ?? []), ...newPath]);\n            } else {\n              if (newPath.includes(currentElement.id)) {\n                newPath.pop();\n                setExpendedItems((prev) => [...(prev ?? []), ...newPath]);\n              }\n            }\n            return;\n          }\n          if (\n            isSelectable &&\n            currentElement.children &&\n            currentElement.children.length > 0\n          ) {\n            currentElement.children.forEach((child) => {\n              findParent(child, newPath);\n            });\n          }\n        };\n        elements.forEach((element) => {\n          findParent(element);\n        });\n      },\n      [],\n    );\n\n    useEffect(() => {\n      if (initialSelectedId) {\n        expandSpecificTargetedElements(elements, initialSelectedId);\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [initialSelectedId, elements]);\n\n    const direction = dir === \"rtl\" ? \"rtl\" : \"ltr\";\n\n    return (\n      <TreeContext.Provider\n        value={{\n          selectedId,\n          expendedItems,\n          handleExpand,\n          selectItem,\n          setExpendedItems,\n          indicator,\n          openIcon,\n          closeIcon,\n          direction,\n        }}\n      >\n        <div className={cn(\"size-full\", className)}>\n          <ScrollArea\n            ref={ref}\n            className=\"h-full relative px-2\"\n            dir={dir as Direction}\n          >\n            <AccordionPrimitive.Root\n              {...props}\n              type=\"multiple\"\n              defaultValue={expendedItems}\n              value={expendedItems}\n              className=\"flex flex-col gap-1\"\n              onValueChange={(value) =>\n                setExpendedItems((prev) => [...(prev ?? []), value[0]])\n              }\n              dir={dir as Direction}\n            >\n              {children}\n            </AccordionPrimitive.Root>\n          </ScrollArea>\n        </div>\n      </TreeContext.Provider>\n    );\n  },\n);\n\nTree.displayName = \"Tree\";\n\nconst TreeIndicator = forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { direction } = useTree();\n\n  return (\n    <div\n      dir={direction}\n      ref={ref}\n      className={cn(\n        \"h-full w-px bg-muted absolute left-1.5 rtl:right-1.5 py-3 rounded-md hover:bg-slate-300 duration-300 ease-in-out\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\n\nTreeIndicator.displayName = \"TreeIndicator\";\n\ninterface FolderComponentProps\n  extends React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item> {}\n\ntype FolderProps = {\n  expendedItems?: string[];\n  element: string;\n  isSelectable?: boolean;\n  isSelect?: boolean;\n} & FolderComponentProps;\n\nconst Folder = forwardRef<\n  HTMLDivElement,\n  FolderProps & React.HTMLAttributes<HTMLDivElement>\n>(\n  (\n    {\n      className,\n      element,\n      value,\n      isSelectable = true,\n      isSelect,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const {\n      direction,\n      handleExpand,\n      expendedItems,\n      indicator,\n      setExpendedItems,\n      openIcon,\n      closeIcon,\n    } = useTree();\n\n    return (\n      <AccordionPrimitive.Item\n        {...props}\n        value={value}\n        className=\"relative overflow-hidden h-full \"\n      >\n        <AccordionPrimitive.Trigger\n          className={cn(\n            `flex items-center gap-1 text-sm rounded-md`,\n            className,\n            {\n              \"bg-muted rounded-md\": isSelect && isSelectable,\n              \"cursor-pointer\": isSelectable,\n              \"cursor-not-allowed opacity-50\": !isSelectable,\n            },\n          )}\n          disabled={!isSelectable}\n          onClick={() => handleExpand(value)}\n        >\n          {expendedItems?.includes(value)\n            ? openIcon ?? <FolderOpenIcon className=\"h-4 w-4\" />\n            : closeIcon ?? <FolderIcon className=\"h-4 w-4\" />}\n          <span>{element}</span>\n        </AccordionPrimitive.Trigger>\n        <AccordionPrimitive.Content className=\"text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down relative overflow-hidden h-full\">\n          {element && indicator && <TreeIndicator aria-hidden=\"true\" />}\n          <AccordionPrimitive.Root\n            dir={direction}\n            type=\"multiple\"\n            className=\"flex flex-col gap-1 py-1 ml-5 rtl:mr-5 \"\n            defaultValue={expendedItems}\n            value={expendedItems}\n            onValueChange={(value) => {\n              setExpendedItems?.((prev) => [...(prev ?? []), value[0]]);\n            }}\n          >\n            {children}\n          </AccordionPrimitive.Root>\n        </AccordionPrimitive.Content>\n      </AccordionPrimitive.Item>\n    );\n  },\n);\n\nFolder.displayName = \"Folder\";\n\nconst File = forwardRef<\n  HTMLButtonElement,\n  {\n    value: string;\n    handleSelect?: (id: string) => void;\n    isSelectable?: boolean;\n    isSelect?: boolean;\n    fileIcon?: React.ReactNode;\n  } & React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(\n  (\n    {\n      value,\n      className,\n      handleSelect,\n      isSelectable = true,\n      isSelect,\n      fileIcon,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { direction, selectedId, selectItem } = useTree();\n    const isSelected = isSelect ?? selectedId === value;\n    return (\n      <AccordionPrimitive.Item value={value} className=\"relative\">\n        <AccordionPrimitive.Trigger\n          ref={ref}\n          {...props}\n          dir={direction}\n          disabled={!isSelectable}\n          aria-label=\"File\"\n          className={cn(\n            \"flex items-center gap-1 cursor-pointer text-sm pr-1 rtl:pl-1 rtl:pr-0 rounded-md  duration-200 ease-in-out\",\n            {\n              \"bg-muted\": isSelected && isSelectable,\n            },\n            isSelectable ? \"cursor-pointer\" : \"opacity-50 cursor-not-allowed\",\n            className,\n          )}\n          onClick={() => selectItem(value)}\n        >\n          {fileIcon ?? <FileIcon className=\"h-4 w-4\" />}\n          {children}\n        </AccordionPrimitive.Trigger>\n      </AccordionPrimitive.Item>\n    );\n  },\n);\n\nFile.displayName = \"File\";\n\nconst CollapseButton = forwardRef<\n  HTMLButtonElement,\n  {\n    elements: TreeViewElement[];\n    expandAll?: boolean;\n  } & React.HTMLAttributes<HTMLButtonElement>\n>(({ className, elements, expandAll = false, children, ...props }, ref) => {\n  const { expendedItems, setExpendedItems } = useTree();\n\n  const expendAllTree = useCallback((elements: TreeViewElement[]) => {\n    const expandTree = (element: TreeViewElement) => {\n      const isSelectable = element.isSelectable ?? true;\n      if (isSelectable && element.children && element.children.length > 0) {\n        setExpendedItems?.((prev) => [...(prev ?? []), element.id]);\n        element.children.forEach(expandTree);\n      }\n    };\n\n    elements.forEach(expandTree);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const closeAll = useCallback(() => {\n    setExpendedItems?.([]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    console.log(expandAll);\n    if (expandAll) {\n      expendAllTree(elements);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [expandAll]);\n\n  return (\n    <Button\n      variant={\"ghost\"}\n      className=\"h-8 w-fit p-1 absolute bottom-1 right-2\"\n      onClick={\n        expendedItems && expendedItems.length > 0\n          ? closeAll\n          : () => expendAllTree(elements)\n      }\n      ref={ref}\n      {...props}\n    >\n      {children}\n      <span className=\"sr-only\">Toggle</span>\n    </Button>\n  );\n});\n\nCollapseButton.displayName = \"CollapseButton\";\n\nexport { Tree, Folder, File, CollapseButton, type TreeViewElement };\n"
    }
  ],
  "meta": {},
  "docs": "https://shadcn-extension.vercel.app/docs/tree-view"
}