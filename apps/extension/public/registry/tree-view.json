{
  "name": "tree-view",
  "type": "registry:ui",
  "dependencies": [
    "@tanstack/react-virtual",
    "use-resize-observer"
  ],
  "registryDependencies": [
    "https://shadcn-extension.vercel.app/registry/tree-view-api.json"
  ],
  "files": [
    {
      "path": "./registry/default/extension/tree-view.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport React, { forwardRef, useCallback, useRef } from \"react\";\nimport useResizeObserver from \"use-resize-observer\";\nimport { useVirtualizer } from \"@tanstack/react-virtual\";\nimport {\n  Tree,\n  Folder,\n  File,\n  CollapseButton,\n  TreeViewElement,\n} from \"./tree-view-api\";\n\n// TODO: Add the ability to add custom icons\n\ninterface TreeViewComponentProps extends React.HTMLAttributes<HTMLDivElement> {}\n\ntype TreeViewProps = {\n  initialSelectedId?: string;\n  elements: TreeViewElement[];\n  indicator?: boolean;\n} & (\n  | {\n      initialExpendedItems?: string[];\n      expandAll?: false;\n    }\n  | {\n      initialExpendedItems?: undefined;\n      expandAll: true;\n    }\n) &\n  TreeViewComponentProps;\n\n/**\n * Tree View Docs: {@link: https://shadcn-extension.vercel.app/docs/tree-view}\n */\n\nexport const TreeView = ({\n  elements,\n  className,\n  initialSelectedId,\n  initialExpendedItems,\n  expandAll,\n  indicator = false,\n}: TreeViewProps) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { getVirtualItems, getTotalSize } = useVirtualizer({\n    count: elements.length,\n    getScrollElement: () => containerRef.current,\n    estimateSize: useCallback(() => 40, []),\n    overscan: 5,\n  });\n\n  const { height = getTotalSize(), width } = useResizeObserver({\n    ref: containerRef,\n  });\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        \"w-full rounded-md overflow-hidden py-1 relative\",\n        className,\n      )}\n    >\n      <Tree\n        initialSelectedId={initialSelectedId}\n        initialExpendedItems={initialExpendedItems}\n        elements={elements}\n        style={{ height, width }}\n        className=\"w-full h-full overflow-y-auto\"\n      >\n        {getVirtualItems().map((element) => (\n          <TreeItem\n            aria-label=\"Root\"\n            key={element.key}\n            elements={[elements[element.index]]}\n            indicator={indicator}\n          />\n        ))}\n        <CollapseButton elements={elements} expandAll={expandAll}>\n          <span>Expand All</span>\n        </CollapseButton>\n      </Tree>\n    </div>\n  );\n};\n\nTreeView.displayName = \"TreeView\";\n\nexport const TreeItem = forwardRef<\n  HTMLUListElement,\n  {\n    elements?: TreeViewElement[];\n    indicator?: boolean;\n  } & React.HTMLAttributes<HTMLUListElement>\n>(({ className, elements, indicator, ...props }, ref) => {\n  return (\n    <ul ref={ref} className=\"w-full space-y-1 \" {...props}>\n      {elements &&\n        elements.map((element) => (\n          <li key={element.id} className=\"w-full\">\n            {element.children && element.children?.length > 0 ? (\n              <Folder\n                element={element.name}\n                value={element.id}\n                isSelectable={element.isSelectable}\n              >\n                <TreeItem\n                  key={element.id}\n                  aria-label={`folder ${element.name}`}\n                  elements={element.children}\n                  indicator={indicator}\n                />\n              </Folder>\n            ) : (\n              <File\n                value={element.id}\n                aria-label={`File ${element.name}`}\n                key={element.id}\n                isSelectable={element.isSelectable}\n              >\n                <span>{element?.name}</span>\n              </File>\n            )}\n          </li>\n        ))}\n    </ul>\n  );\n});\n\nTreeItem.displayName = \"TreeItem\";\n"
    }
  ],
  "docs": "https://shadcn-extension.vercel.app/docs/tree-view"
}