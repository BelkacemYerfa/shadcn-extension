{
  "name": "smart-datetime-input",
  "type": "registry:ui",
  "dependencies": [
    "chrono-node",
    "react-day-picker"
  ],
  "registryDependencies": [
    "popover",
    "calendar",
    "input",
    "button",
    "scroll-area"
  ],
  "files": [
    {
      "path": "./registry/default/extension/smart-datetime-input.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { parseDate } from \"chrono-node\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { ActiveModifiers } from \"react-day-picker\";\nimport { Calendar, CalendarProps } from \"@/components/ui/calendar\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button, buttonVariants } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { Calendar as CalendarIcon, LucideTextCursorInput } from \"lucide-react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { format } from \"date-fns\";\n\n/* -------------------------------------------------------------------------- */\n/*                               Inspired By:                                 */\n/*                               @steventey                                   */\n/* ------------------https://dub.co/blog/smart-datetime-picker--------------- */\n/* -------------------------------------------------------------------------- */\n\n/**\n * Utility function that parses dates.\n * Parses a given date string using the `chrono-node` library.\n *\n * @param str - A string representation of a date and time.\n * @returns A `Date` object representing the parsed date and time, or `null` if the string could not be parsed.\n */\nexport const parseDateTime = (str: Date | string) => {\n  if (str instanceof Date) return str;\n  return parseDate(str);\n};\n\n/**\n * Converts a given timestamp or the current date and time to a string representation in the local time zone.\n * format: `HH:mm`, adjusted for the local time zone.\n *\n * @param timestamp {Date | string}\n * @returns A string representation of the timestamp\n */\nexport const getDateTimeLocal = (timestamp?: Date): string => {\n  const d = timestamp ? new Date(timestamp) : new Date();\n  if (d.toString() === \"Invalid Date\") return \"\";\n  return new Date(d.getTime() - d.getTimezoneOffset() * 60000)\n    .toISOString()\n    .split(\":\")\n    .slice(0, 2)\n    .join(\":\");\n};\n\n/**\n * Formats a given date and time object or string into a human-readable string representation.\n * \"MMM D, YYYY h:mm A\" (e.g. \"Jan 1, 2023 12:00 PM\").\n *\n * @param datetime - {Date | string}\n * @returns A string representation of the date and time\n */\nexport const formatDateTime = (datetime: Date | string) => {\n  return new Date(datetime).toLocaleTimeString(\"en-US\", {\n    month: \"short\",\n    day: \"numeric\",\n    year: \"numeric\",\n    hour: \"numeric\",\n    minute: \"numeric\",\n    hour12: true,\n  });\n};\n\nconst inputBase =\n  \"bg-transparent focus:outline-none focus:ring-0 focus-within:outline-none focus-within:ring-0 sm:text-sm disabled:cursor-not-allowed disabled:opacity-50\";\n\n// @source: https://www.perplexity.ai/search/in-javascript-how-RfI7fMtITxKr5c.V9Lv5KA#1\n// use this pattern to validate the transformed date string for the natural language input\nconst naturalInputValidationPattern =\n  \"^[A-Z][a-z]{2}sd{1,2},sd{4},sd{1,2}:d{2}s[AP]M$\";\n\nconst DEFAULT_SIZE = 96;\n\n/**\n * Smart time input Docs: {@link: https://shadcn-extension.vercel.app/docs/smart-time-input}\n */\n\ninterface SmartDatetimeInputProps {\n  value?: Date;\n  onValueChange: (date: Date) => void;\n}\n\ninterface SmartDatetimeInputContextProps extends SmartDatetimeInputProps {\n  Time: string;\n  onTimeChange: (time: string) => void;\n}\n\nconst SmartDatetimeInputContext =\n  React.createContext<SmartDatetimeInputContextProps | null>(null);\n\nconst useSmartDateInput = () => {\n  const context = React.useContext(SmartDatetimeInputContext);\n  if (!context) {\n    throw new Error(\n      \"useSmartDateInput must be used within SmartDateInputProvider\",\n    );\n  }\n  return context;\n};\n\nexport const SmartDatetimeInput = React.forwardRef<\n  HTMLInputElement,\n  Omit<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    \"type\" | \"ref\" | \"value\" | \"defaultValue\" | \"onBlur\"\n  > &\n    SmartDatetimeInputProps\n>(({ className, value, onValueChange, placeholder, disabled }, ref) => {\n  // ? refactor to be only used with controlled input\n  /*  const [dateTime, setDateTime] = React.useState<Date | undefined>(\n    value ?? undefined\n  ); */\n\n  const [Time, setTime] = React.useState<string>(\"\");\n\n  const onTimeChange = React.useCallback((time: string) => {\n    setTime(time);\n  }, []);\n\n  return (\n    <SmartDatetimeInputContext.Provider\n      value={{ value, onValueChange, Time, onTimeChange }}\n    >\n      <div className=\"flex items-center justify-center\">\n        <div\n          className={cn(\n            \"flex gap-1 w-full p-1 items-center justify-between rounded-md border transition-all\",\n            \"focus-within:outline-0 focus:outline-0 focus:ring-0\",\n            \"placeholder:text-muted-foreground focus-visible:outline-0 \",\n            className,\n          )}\n        >\n          <DateTimeLocalInput />\n          <NaturalLanguageInput\n            placeholder={placeholder}\n            disabled={disabled}\n            ref={ref}\n          />\n        </div>\n      </div>\n    </SmartDatetimeInputContext.Provider>\n  );\n});\n\nSmartDatetimeInput.displayName = \"DatetimeInput\";\n\n// Make it a standalone component\n\nconst TimePicker = () => {\n  const { value, onValueChange, Time, onTimeChange } = useSmartDateInput();\n  const [activeIndex, setActiveIndex] = React.useState(-1);\n  const timestamp = 15;\n\n  const formateSelectedTime = React.useCallback(\n    (time: string, hour: number, partStamp: number) => {\n      onTimeChange(time);\n\n      const newVal = parseDateTime(value ?? new Date());\n\n      if (!newVal) return;\n\n      newVal.setHours(\n        hour,\n        partStamp === 0 ? parseInt(\"00\") : timestamp * partStamp,\n      );\n\n      // ? refactor needed check if we want to use the new date\n\n      onValueChange(newVal);\n    },\n    [value],\n  );\n\n  const handleKeydown = React.useCallback(\n    (e: React.KeyboardEvent<HTMLDivElement>) => {\n      e.stopPropagation();\n\n      if (!document) return;\n\n      const moveNext = () => {\n        const nextIndex =\n          activeIndex + 1 > DEFAULT_SIZE - 1 ? 0 : activeIndex + 1;\n\n        const currentElm = document.getElementById(`time-${nextIndex}`);\n\n        currentElm?.focus();\n\n        setActiveIndex(nextIndex);\n      };\n\n      const movePrev = () => {\n        const prevIndex =\n          activeIndex - 1 < 0 ? DEFAULT_SIZE - 1 : activeIndex - 1;\n\n        const currentElm = document.getElementById(`time-${prevIndex}`);\n\n        currentElm?.focus();\n\n        setActiveIndex(prevIndex);\n      };\n\n      const setElement = () => {\n        const currentElm = document.getElementById(`time-${activeIndex}`);\n\n        if (!currentElm) return;\n\n        currentElm.focus();\n\n        const timeValue = currentElm.textContent ?? \"\";\n\n        // this should work now haha that hour is what does the trick\n\n        const PM_AM = timeValue.split(\" \")[1];\n        const PM_AM_hour = parseInt(timeValue.split(\" \")[0].split(\":\")[0]);\n        const hour =\n          PM_AM === \"AM\"\n            ? PM_AM_hour === 12\n              ? 0\n              : PM_AM_hour\n            : PM_AM_hour === 12\n              ? 12\n              : PM_AM_hour + 12;\n\n        const part = Math.floor(\n          parseInt(timeValue.split(\" \")[0].split(\":\")[1]) / 15,\n        );\n\n        formateSelectedTime(timeValue, hour, part);\n      };\n\n      const reset = () => {\n        const currentElm = document.getElementById(`time-${activeIndex}`);\n        currentElm?.blur();\n        setActiveIndex(-1);\n      };\n\n      switch (e.key) {\n        case \"ArrowUp\":\n          movePrev();\n          break;\n\n        case \"ArrowDown\":\n          moveNext();\n          break;\n\n        case \"Escape\":\n          reset();\n          break;\n\n        case \"Enter\":\n          setElement();\n          break;\n      }\n    },\n    [activeIndex, formateSelectedTime],\n  );\n\n  const handleClick = React.useCallback(\n    (hour: number, part: number, PM_AM: string, currentIndex: number) => {\n      formateSelectedTime(\n        `${hour}:${part === 0 ? \"00\" : timestamp * part} ${PM_AM}`,\n        hour,\n        part,\n      );\n      setActiveIndex(currentIndex);\n    },\n    [formateSelectedTime],\n  );\n\n  const currentTime = React.useMemo(() => {\n    const timeVal = Time.split(\" \")[0];\n    return {\n      hours: parseInt(timeVal.split(\":\")[0]),\n      minutes: parseInt(timeVal.split(\":\")[1]),\n    };\n  }, [Time]);\n\n  React.useEffect(() => {\n    const getCurrentElementTime = () => {\n      const timeVal = Time.split(\" \")[0];\n      const hours = parseInt(timeVal.split(\":\")[0]);\n      const minutes = parseInt(timeVal.split(\":\")[1]);\n      const PM_AM = Time.split(\" \")[1];\n\n      const formatIndex =\n        PM_AM === \"AM\" ? hours : hours === 12 ? hours : hours + 12;\n      const formattedHours = formatIndex;\n\n      console.log(formatIndex);\n\n      for (let j = 0; j <= 3; j++) {\n        const diff = Math.abs(j * timestamp - minutes);\n        const selected =\n          PM_AM === (formattedHours >= 12 ? \"PM\" : \"AM\") &&\n          (minutes <= 53 ? diff < Math.ceil(timestamp / 2) : diff < timestamp);\n\n        if (selected) {\n          const trueIndex =\n            activeIndex === -1 ? formattedHours * 4 + j : activeIndex;\n\n          setActiveIndex(trueIndex);\n\n          const currentElm = document.getElementById(`time-${trueIndex}`);\n          currentElm?.scrollIntoView({\n            block: \"center\",\n            behavior: \"smooth\",\n          });\n        }\n      }\n    };\n\n    getCurrentElementTime();\n  }, [Time, activeIndex]);\n\n  const height = React.useMemo(() => {\n    if (!document) return;\n    const calendarElm = document.getElementById(\"calendar\");\n    if (!calendarElm) return;\n    return calendarElm.style.height;\n  }, []);\n\n  return (\n    <div className=\"space-y-2 pr-3 py-3 relative \">\n      <h3 className=\"text-sm font-medium \">Time</h3>\n      <ScrollArea\n        onKeyDown={handleKeydown}\n        className=\"h-[90%] w-full focus-visible:outline-0 focus-visible:ring-0 focus-visible:ring-offset-0 focus-visible:border-0 py-0.5\"\n        style={{\n          height,\n        }}\n      >\n        <ul\n          className={cn(\n            \"flex items-center flex-col gap-1 h-full max-h-56 w-28 px-1 py-0.5\",\n          )}\n        >\n          {Array.from({ length: 24 }).map((_, i) => {\n            const PM_AM = i >= 12 ? \"PM\" : \"AM\";\n            const formatIndex = i > 12 ? i % 12 : i === 0 || i === 12 ? 12 : i;\n            return Array.from({ length: 4 }).map((_, part) => {\n              const diff = Math.abs(part * timestamp - currentTime.minutes);\n\n              const trueIndex = i * 4 + part;\n\n              // ? refactor : add the select of the default time on the current device (H:MM)\n              const isSelected =\n                (currentTime.hours === i ||\n                  currentTime.hours === formatIndex) &&\n                Time.split(\" \")[1] === PM_AM &&\n                (currentTime.minutes <= 53\n                  ? diff < Math.ceil(timestamp / 2)\n                  : diff < timestamp);\n\n              const isSuggested = !value && isSelected;\n\n              const currentValue = `${formatIndex}:${\n                part === 0 ? \"00\" : timestamp * part\n              } ${PM_AM}`;\n\n              return (\n                <li\n                  tabIndex={isSelected ? 0 : -1}\n                  id={`time-${trueIndex}`}\n                  key={`time-${trueIndex}`}\n                  aria-label=\"currentTime\"\n                  className={cn(\n                    buttonVariants({\n                      variant: isSuggested\n                        ? \"secondary\"\n                        : isSelected\n                          ? \"default\"\n                          : \"outline\",\n                    }),\n                    \"h-8 px-3 w-full text-sm focus-visible:outline-0 outline-0 focus-visible:border-0 cursor-default ring-0\",\n                  )}\n                  onClick={() => handleClick(i, part, PM_AM, trueIndex)}\n                  onFocus={() => isSuggested && setActiveIndex(trueIndex)}\n                >\n                  {currentValue}\n                </li>\n              );\n            });\n          })}\n        </ul>\n      </ScrollArea>\n    </div>\n  );\n};\n\nconst NaturalLanguageInput = React.forwardRef<\n  HTMLInputElement,\n  {\n    placeholder?: string;\n    disabled?: boolean;\n  }\n>(({ placeholder, ...props }, ref) => {\n  const { value, onValueChange, Time, onTimeChange } = useSmartDateInput();\n\n  const _placeholder = placeholder ?? 'e.g. \"tomorrow at 5pm\" or \"in 2 hours\"';\n\n  const [inputValue, setInputValue] = React.useState<string>(\"\");\n\n  React.useEffect(() => {\n    const hour = new Date().getHours();\n    const timeVal = `${\n      hour >= 12 ? hour % 12 : hour\n    }:${new Date().getMinutes()} ${hour >= 12 ? \"PM\" : \"AM\"}`;\n    setInputValue(value ? formatDateTime(value) : \"\");\n    onTimeChange(value ? Time : timeVal);\n  }, [value, Time]);\n\n  const handleParse = React.useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      // parse the date string when the input field loses focus\n      const parsedDateTime = parseDateTime(e.currentTarget.value);\n      if (parsedDateTime) {\n        const PM_AM = parsedDateTime.getHours() >= 12 ? \"PM\" : \"AM\";\n        //fix the time format for this value\n\n        const PM_AM_hour = parsedDateTime.getHours();\n\n        const hour =\n          PM_AM_hour > 12\n            ? PM_AM_hour % 12\n            : PM_AM_hour === 0 || PM_AM_hour === 12\n              ? 12\n              : PM_AM_hour;\n\n        onValueChange(parsedDateTime);\n        setInputValue(formatDateTime(parsedDateTime));\n        onTimeChange(`${hour}:${parsedDateTime.getMinutes()} ${PM_AM}`);\n      }\n    },\n    [value],\n  );\n\n  const handleKeydown = React.useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement>) => {\n      switch (e.key) {\n        case \"Enter\":\n          const parsedDateTime = parseDateTime(e.currentTarget.value);\n          if (parsedDateTime) {\n            const PM_AM = parsedDateTime.getHours() >= 12 ? \"PM\" : \"AM\";\n            //fix the time format for this value\n\n            const PM_AM_hour = parsedDateTime.getHours();\n\n            const hour =\n              PM_AM_hour > 12\n                ? PM_AM_hour % 12\n                : PM_AM_hour === 0 || PM_AM_hour === 12\n                  ? 12\n                  : PM_AM_hour;\n\n            onValueChange(parsedDateTime);\n            setInputValue(formatDateTime(parsedDateTime));\n            onTimeChange(`${hour}:${parsedDateTime.getMinutes()} ${PM_AM}`);\n          }\n          break;\n      }\n    },\n    [value],\n  );\n\n  return (\n    <Input\n      ref={ref}\n      type=\"text\"\n      placeholder={_placeholder}\n      value={inputValue}\n      onChange={(e) => setInputValue(e.currentTarget.value)}\n      onKeyDown={handleKeydown}\n      onBlur={handleParse}\n      className={cn(\"px-2 mr-0.5 flex-1 border-none h-8 rounded\", inputBase)}\n      {...props}\n    />\n  );\n});\n\nNaturalLanguageInput.displayName = \"NaturalLanguageInput\";\n\ntype DateTimeLocalInputProps = {} & CalendarProps;\n\nconst DateTimeLocalInput = ({\n  className,\n  ...props\n}: DateTimeLocalInputProps) => {\n  const { value, onValueChange, Time } = useSmartDateInput();\n\n  const formateSelectedDate = React.useCallback(\n    (\n      date: Date | undefined,\n      selectedDate: Date,\n      m: ActiveModifiers,\n      e: React.MouseEvent,\n    ) => {\n      const parsedDateTime = parseDateTime(selectedDate);\n\n      if (parsedDateTime) {\n        parsedDateTime.setHours(\n          parseInt(Time.split(\":\")[0]),\n          parseInt(Time.split(\":\")[1]),\n        );\n        onValueChange(parsedDateTime);\n      }\n    },\n    [value, Time],\n  );\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant={\"outline\"}\n          size={\"icon\"}\n          className={cn(\n            \"size-9 flex items-center justify-center font-normal\",\n            !value && \"text-muted-foreground\",\n          )}\n        >\n          <CalendarIcon className=\"size-4\" />\n          <span className=\"sr-only\">calender</span>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\" sideOffset={8}>\n        <div className=\"flex gap-1\">\n          <Calendar\n            {...props}\n            id={\"calendar\"}\n            className={cn(\"peer flex justify-end\", inputBase, className)}\n            mode=\"single\"\n            selected={value}\n            onSelect={formateSelectedDate}\n            initialFocus\n          />\n          <TimePicker />\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nDateTimeLocalInput.displayName = \"DateTimeLocalInput\";\n"
    }
  ],
  "docs": "https://shadcn-extension.vercel.app/docs/smart-datetime-input"
}