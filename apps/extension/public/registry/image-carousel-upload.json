{
  "name": "image-carousel-upload",
  "type": "registry:ui",
  "dependencies": [
    "react-dropzone",
    "embla-carousel-react",
    "embla-carousel"
  ],
  "registryDependencies": [
    "https://shadcn-extension.vercel.app/registry/carousel.json",
    "input"
  ],
  "files": [
    {
      "path": "./registry/default/extension/image-carousel-upload.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Dispatch,\n  SetStateAction,\n  createContext,\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { SliderThumbItem, useCarousel } from \"./carousel\";\nimport { X as RemoveIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  DropzoneOptions,\n  DropzoneState,\n  FileRejection,\n  useDropzone,\n} from \"react-dropzone\";\nimport { toast } from \"sonner\";\n\ntype CarouselWithUploadContext = {\n  addImageToTheSet: (file: File) => void;\n  removeImageFromPreview: (index: number) => void;\n  isFileTooBig: boolean;\n  dropzoneState: DropzoneState;\n  isLOF?: boolean;\n};\n\nexport const useFileUpload = () => {\n  const context = useContext(CarouselUploadContext);\n  if (!context) {\n    throw new Error(\"useFileUpload must be used within a ImageUploadProvider\");\n  }\n  return context;\n};\n\nconst CarouselUploadContext = createContext<CarouselWithUploadContext | null>(\n  null,\n);\n\ninterface ImageUploadProps<T> extends React.HTMLAttributes<HTMLDivElement> {\n  value: T[] | null;\n  onValueChange: Dispatch<SetStateAction<T[] | null>>;\n  dropzoneOptions: DropzoneOptions;\n  reSelect?: boolean;\n}\n\nexport function FileUploadCarouselProvider<T>({\n  className,\n  value,\n  onValueChange,\n  dropzoneOptions,\n  reSelect,\n  children,\n}: ImageUploadProps<T>) {\n  const { emblaMainApi, mainRef: emblaMainRef, activeIndex } = useCarousel();\n\n  const {\n    accept = {\n      \"image/*\": [\".jpg\", \".jpeg\", \".png\", \".gif\"],\n    },\n    maxFiles = 1,\n    maxSize = 8 * 1024 * 1024,\n    multiple = true,\n  } = dropzoneOptions;\n  const reSelectAll = maxFiles === 1 ? true : reSelect;\n  const [isFileTooBig, setIsFileTooBig] = useState(false);\n  const [isLOF, setIsLOF] = useState(false);\n\n  const addImageToTheSet = useCallback(\n    (file: File) => {\n      if (file.size > maxSize) {\n        toast.error(`File too big , Max size is ${maxSize / 1024 / 1024}MB`);\n        return;\n      }\n      const fileWithPreview = {\n        file,\n        preview: URL.createObjectURL(file),\n      } as T;\n      onValueChange((prev) => {\n        if (!reSelectAll && prev && prev.length >= maxFiles) {\n          toast.warning(\n            `Max files is ${maxFiles} , the component will take the last ones by default to complete the set`,\n          );\n\n          return prev;\n        }\n        return [...(prev || []), fileWithPreview];\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [reSelectAll],\n  );\n\n  const removeImageFromPreview = useCallback(\n    (index: number) => {\n      if (!emblaMainApi || !emblaMainRef) return;\n      if (index === activeIndex) {\n        if (activeIndex === emblaMainApi.selectedScrollSnap()) {\n          emblaMainApi.scrollPrev();\n        } else {\n          emblaMainApi.scrollNext();\n        }\n      }\n      onValueChange((prev) => {\n        if (!prev) return null;\n        const newPreview = [...prev];\n        newPreview.splice(index, 1);\n        return newPreview;\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [emblaMainApi, activeIndex],\n  );\n\n  const handleKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      event.preventDefault();\n      if (!emblaMainApi) return;\n      if (event.key === \"ArrowLeft\") {\n        emblaMainApi.scrollPrev();\n      } else if (event.key === \"ArrowRight\") {\n        emblaMainApi.scrollNext();\n      } else if (event.key === \"Delete\" || event.key === \"Backspace\") {\n        removeImageFromPreview(activeIndex);\n      } else if (event.key === \"Enter\") {\n        dropzoneState.inputRef.current?.click();\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [emblaMainApi, activeIndex, removeImageFromPreview],\n  );\n\n  const onDrop = useCallback(\n    (acceptedFiles: File[], rejectedFiles: FileRejection[]) => {\n      const files = acceptedFiles;\n\n      if (!!reSelectAll) {\n        onValueChange(null);\n      }\n\n      if (!files) {\n        toast.error(\"file error , probably too big\");\n        return;\n      }\n\n      files.forEach(addImageToTheSet);\n\n      if (rejectedFiles.length > 0) {\n        for (let i = 0; i < rejectedFiles.length; i++) {\n          if (rejectedFiles[i].errors[0]?.code === \"file-too-large\") {\n            toast.error(\n              `File is too large. Max size is ${maxSize / 1024 / 1024}MB`,\n            );\n            break;\n          }\n          if (rejectedFiles[i].errors[0]?.message) {\n            toast.error(rejectedFiles[i].errors[0].message);\n            break;\n          }\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [reSelectAll],\n  );\n\n  useEffect(() => {\n    if (!value) return;\n    if (value.length === maxFiles) {\n      setIsLOF(true);\n      return;\n    }\n    setIsLOF(false);\n  }, [value, maxFiles]);\n\n  const dropzoneState = useDropzone({\n    onDrop,\n    maxSize,\n    accept,\n    maxFiles,\n    multiple,\n    onDropRejected: () => setIsFileTooBig(true),\n    onDropAccepted: () => setIsFileTooBig(false),\n  });\n\n  return (\n    <CarouselUploadContext.Provider\n      value={{\n        addImageToTheSet,\n        removeImageFromPreview,\n        isFileTooBig,\n        dropzoneState,\n        isLOF,\n      }}\n    >\n      <div\n        tabIndex={0}\n        onKeyDownCapture={handleKeyDown}\n        className={cn(\n          \"grid gap-2 w-full relative focus:outline-none\",\n          className,\n        )}\n      >\n        {children}\n      </div>\n    </CarouselUploadContext.Provider>\n  );\n}\n\nFileUploadCarouselProvider.displayName = \"FileUploadCarouselProvider\";\n\nexport const SliderThumbItemWithRemove = forwardRef<\n  HTMLButtonElement,\n  {\n    index: number;\n  } & React.HTMLAttributes<HTMLButtonElement>\n>(({ index, children, className, ...props }, ref) => {\n  const { removeImageFromPreview } = useFileUpload();\n  return (\n    <SliderThumbItem index={index} className={className}>\n      <button\n        ref={ref}\n        {...props}\n        type=\"button\"\n        className={cn(\n          \"absolute -right-2 -top-1 z-10 opacity-70 h-6 w-6 focus:outline-none\",\n        )}\n        onClick={() => removeImageFromPreview(index)}\n      >\n        {\" \"}\n        <RemoveIcon className=\"h-4 w-4 stroke-red-600\" />\n      </button>\n      {children}\n    </SliderThumbItem>\n  );\n});\n\nSliderThumbItemWithRemove.displayName = \"SliderThumbItemWithRemove\";\n\nexport const CustomUploadInput = forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => {\n  const { dropzoneState, isFileTooBig, isLOF } = useFileUpload();\n  const rootProps = isLOF ? {} : dropzoneState.getRootProps();\n  return (\n    <div\n      ref={ref}\n      {...props}\n      className={`w-full ${\n        isLOF ? \"opacity-50 cursor-not-allowed \" : \"cursor-pointer \"\n      }`}\n    >\n      <div\n        className={cn(\n          `w-full border border-muted-foreground border-dashed rounded-lg duration-300 ease-in-out\n      ${\n        dropzoneState.isDragAccept\n          ? \"border-green-500\"\n          : dropzoneState.isDragReject || isFileTooBig\n            ? \"border-red-500\"\n            : \"border-gray-300\"\n      }`,\n          className,\n        )}\n        {...rootProps}\n      >\n        {children}\n      </div>\n      <Input\n        ref={dropzoneState.inputRef}\n        disabled={isLOF}\n        {...dropzoneState.getInputProps()}\n        className={`${isLOF ? \"cursor-not-allowed\" : \"\"}`}\n      />\n    </div>\n  );\n});\n\nCustomUploadInput.displayName = \"CustomUploadInput\";\n"
    }
  ]
}